name: Build

on: [push]

.llvm: &llvm
  llvm_version: ['10.x', '11.x']
  llvm_repo_url: ['https://github.com/llvm/llvm-project.git']

jobs:
  build:
    name: Build

    strategy:
      matrix:
        <<: *llvm
        target: [
          { id: 'linux-amd64', os: 'ubuntu-latest' },
          { id: 'darwin-amd64', os: 'macos-latest' },
          { id: 'windows-amd64', os: 'windows-latest' },
        ]
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.target.id, 'linux-')
        shell: bash
        run: |
          sudo apt-get install ninja-build

      - name: Install `ninja` on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja

      - name: Install `ninja` on Windows
        if: startsWith(matrix.target.id, 'windows-')
        shell: bash
        run: |
          choco install ninja

      - name: Build
        shell: bash
        run: |
          ./build.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Inspect
        shell: bash
        run: |
          ls -laGiR llvm-project/build/install/*
          llvm-project/build/install/bin/llvm-config --version
          llvm-project/build/install/bin/clang --version

      - name: Zip
        shell: bash
        run: |
          mv llvm-project/build/install llvm-project/build/llvm
          mkdir dist
          tar -C llvm-project/build/llvm -zcvf dist/llvm.tar.gz .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.id }}-${{ matrix.llvm_version }}
          path: dist
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    needs: [build]

    strategy:
      matrix:
        <<: *llvm

    steps:
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Inspect
        shell: bash
        run: |
          ls -laGiR ./*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.llvm_version }}
          release_name: Release ${{ matrix.llvm_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-amd64-${{matrix.llvm_version}}/llvm.tar.gz
          asset_name: linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset Darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/darwin-amd64-${{matrix.llvm_version}}/llvm.tar.gz
          asset_name: darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-amd64-${{matrix.llvm_version}}/llvm.tar.gz
          asset_name: windows-amd64.tar.gz
          asset_content_type: application/gzip
